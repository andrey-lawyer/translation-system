// .github/actions/vectorize/index.js
import { pipeline } from "@xenova/transformers";
import { CloudClient } from "chromadb";
import fs from "fs/promises";

const CHROMA_API_KEY = process.env.CHROMA_API_KEY || '';
const CHROMA_TENANT = process.env.CHROMA_TENANT || '';
const CHROMA_DATABASE = process.env.CHROMA_DATABASE || '';
const COLLECTION_NAME = process.env.COLLECTION_NAME || "TestCollection";

// ----------------------
// –§—É–Ω–∫—Ü–∏—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
// ----------------------
function flattenEmbedding(embedding) {
    if (!Array.isArray(embedding)) return [];
    if (!Array.isArray(embedding[0])) return embedding; // —É–∂–µ –ø–ª–æ—Å–∫–∏–π
    const length = embedding[0].length;
    const sum = new Array(length).fill(0);
    for (const tokenVec of embedding) {
        for (let i = 0; i < length; i++) sum[i] += tokenVec[i];
    }
    return sum.map(x => x / embedding.length);
}

// ----------------------
// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –≤ Chroma
// ----------------------
async function getOrCreateCollection(client, name) {
    try {
        console.log(`‚è≥ –ò—â–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é: ${name}...`);
        const collection = await client.getCollection({ name });
        console.log(`‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è –≥–æ—Ç–æ–≤–∞: ID=${collection.id}, name=${collection.name}`);
        return collection;
    } catch (err) {
        if (err.message.includes("collection not found") || err.name === "ChromaConnectionError") {
            console.log(`‚è≥ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é: ${name}...`);
            const collection = await client.createCollection({ name });
            console.log(`‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ID=${collection.id}, name=${collection.name}`);
            return collection;
        }
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏:", err.message);
        return null;
    }
}

// ----------------------
// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
// ----------------------
async function main() {
    console.log("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...");
    const embedder = await pipeline("feature-extraction");
    console.log("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞");

    const filesToVectorize = [
        ".github/actions/vectorize/index.js",
        "README.MD",
        "go-translator/internal/server/server.go",
        "react-front/src/App.js",
        // –¥–æ–±–∞–≤—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    ];

    // ----------------------
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –ª–æ–∫–∞–ª—å–Ω–æ
    // ----------------------
    const embeddings = {};
    for (const file of filesToVectorize) {
        try {
            const text = await fs.readFile(file, "utf-8");
            const embeddingRaw = await embedder(text);
            const embedding = flattenEmbedding(embeddingRaw);
            embeddings[file] = embedding;
            console.log(`‚úÖ Embedded ${file} (length: ${embedding.length})`);
        } catch (err) {
            console.error(`‚ùå Failed embedding ${file}:`, err.message);
        }
    }

    // ----------------------
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Chroma Cloud
    // ----------------------
    if (CHROMA_API_KEY && CHROMA_TENANT && CHROMA_DATABASE) {
        try {
            console.log("‚è≥ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Chroma Cloud...");
            const client = new CloudClient({
                apiKey: CHROMA_API_KEY,
                tenant: CHROMA_TENANT,
                database: CHROMA_DATABASE,
            });

            const collection = await getOrCreateCollection(client, COLLECTION_NAME);
            if (!collection) {
                console.warn("‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É.");
                return;
            }

            for (const [file, vector] of Object.entries(embeddings)) {
                try {
                    await collection.add({
                        ids: [file],
                        embeddings: [vector],
                        metadatas: [{ file }],
                    });
                    console.log(`‚úÖ Pushed ${file} to Chroma Cloud`);
                } catch (err) {
                    console.error(`‚ùå Failed to push ${file}:`, err.message);
                }
            }
        } catch (err) {
            console.error("‚ùå Chroma Cloud connection failed:", err.message);
        }
    } else {
        console.log("‚ö†Ô∏è Chroma Cloud credentials not provided, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É.");
    }

    console.log("üéØ Vectorization complete ‚úÖ");
}

main().catch(err => console.error("üí• Fatal error:", err));








